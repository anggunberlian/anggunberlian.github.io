"use strict";var precacheConfig=[["/anggunberlian.github.io/index.html","6cb9a3c3e67edd061d4d6d89cd1e7c31"],["/anggunberlian.github.io/static/css/main.2f85c43b.css","c8d749ed3f4ff127d87d1f935577b196"],["/anggunberlian.github.io/static/js/main.6bf3ef25.js","abaf54bed68217c55a614eeaa0ed861a"],["/anggunberlian.github.io/static/media/BUU.88e0cdbe.jpg","88e0cdbe5c08935a5e6807970eac1695"],["/anggunberlian.github.io/static/media/Dan.0591ecdf.png","0591ecdf3c166e189e0ea33f8c521a6e"],["/anggunberlian.github.io/static/media/Dona.85030b46.png","85030b46e2edfb49e02cd61e422575c5"],["/anggunberlian.github.io/static/media/EA.d96ebba2.jpeg","d96ebba2561585b6a4b0cca250b6705d"],["/anggunberlian.github.io/static/media/Genome.2afa5493.jpg","2afa5493941d104fcd469c025c5f48ac"],["/anggunberlian.github.io/static/media/GitHub.82bd60ff.png","82bd60ff13b8b6e692125e7e6e59bab5"],["/anggunberlian.github.io/static/media/IIW.a3fd10f3.png","a3fd10f3a0ba34c43fbbb93f9f8f2282"],["/anggunberlian.github.io/static/media/IIW2.fb6b6ec8.jpg","fb6b6ec8168d6742edf65f5a2627078c"],["/anggunberlian.github.io/static/media/Instagram.9906faef.png","9906faef4a68e3cadbf03f642f8541df"],["/anggunberlian.github.io/static/media/JMUN.54531649.jpg","5453164999723a82c09c72e1bf9b1d13"],["/anggunberlian.github.io/static/media/JMUN2.0d503a28.jpg","0d503a28d08415c80809eb545fbd26ca"],["/anggunberlian.github.io/static/media/Zet.84bd4769.jpg","84bd4769d6b4bbf11db79b9ee462e1c3"],["/anggunberlian.github.io/static/media/Zet2.a50ee39d.jpg","a50ee39df49ba7033e033c91d423e51d"],["/anggunberlian.github.io/static/media/mail2.d1ff19b4.svg","d1ff19b4769a4931c3817df223cdcc0c"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,n){var t=new URL(e);return"/"===t.pathname.slice(-1)&&(t.pathname+=n),t.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(n){return new Response(n,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,n,t,a){var i=new URL(e);return a&&i.pathname.match(a)||(i.search+=(i.search?"&":"")+encodeURIComponent(n)+"="+encodeURIComponent(t)),i.toString()},isPathWhitelisted=function(e,n){if(0===e.length)return!0;var t=new URL(n).pathname;return e.some(function(e){return t.match(e)})},stripIgnoredUrlParameters=function(e,n){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return n.every(function(n){return!n.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var n=e[0],t=e[1],a=new URL(n,self.location),i=createCacheKey(a,hashParamName,t,/\.\w{8}\./);return[a.toString(),i]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(n){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!n.has(t)){var a=new Request(t,{credentials:"same-origin"});return fetch(a).then(function(n){if(!n.ok)throw new Error("Request for "+t+" returned a response with status "+n.status);return cleanResponse(n).then(function(n){return e.put(t,n)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var n=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(t){return Promise.all(t.map(function(t){if(!n.has(t.url))return e.delete(t)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var n,t=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),a="index.html";(n=urlsToCacheKeys.has(t))||(t=addDirectoryIndex(t,a),n=urlsToCacheKeys.has(t));var i="/anggunberlian.github.io/index.html";!n&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(t=new URL(i,self.location).toString(),n=urlsToCacheKeys.has(t)),n&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(t)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(n){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,n),fetch(e.request)}))}});